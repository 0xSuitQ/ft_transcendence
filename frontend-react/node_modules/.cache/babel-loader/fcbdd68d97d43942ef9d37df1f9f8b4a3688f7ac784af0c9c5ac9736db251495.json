{"ast":null,"code":"/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\nimport NextMatch from './NextMatch';\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // To store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // To store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n  const [matchQueue, setMatchQueue] = useState([]); // Queue of upcoming matches\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament and generate matches\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      const generatedQueue = generateMatches(); // Generate the entire match queue\n      setMatchQueue(generatedQueue);\n      setCurrentMatch(generatedQueue[0]);\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Function to generate the match queue\n  const generateMatches = () => {\n    const queue = [];\n    for (let i = 0; i < players.length - 1; i++) {\n      for (let j = i + 1; j < players.length; j++) {\n        queue.push(`${players[i]} vs ${players[j]}`);\n      }\n    }\n    return queue;\n  };\n\n  // Function to move to the next match\n  const handleNextMatch = () => {\n    const nextQueue = matchQueue.slice(1); // Remove the current match from the queue\n    setMatchQueue(nextQueue);\n    setCurrentMatch(nextQueue[0] || 'No more matches scheduled.');\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <>\n          <MatchDisplay match={currentMatch} />\n          <NextMatch onNextMatch={handleNextMatch} />\n          <div className=\"match-queue\">\n            <h3>Upcoming Matches</h3>\n            {matchQueue.length > 1 ? (\n              <ul>\n                {matchQueue.slice(1).map((match, index) => (\n                  <li key={index}>{match}</li>\n                ))}\n              </ul>\n            ) : (\n              <p>No more matches scheduled.</p>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Tournament;\n */","map":{"version":3,"names":[],"sources":["/home/diaraz/Desktop/transcendence/frontend/src/components/Tournament.js"],"sourcesContent":["/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\nimport NextMatch from './NextMatch';\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // To store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // To store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n  const [matchQueue, setMatchQueue] = useState([]); // Queue of upcoming matches\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament and generate matches\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      const generatedQueue = generateMatches(); // Generate the entire match queue\n      setMatchQueue(generatedQueue);\n      setCurrentMatch(generatedQueue[0]);\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Function to generate the match queue\n  const generateMatches = () => {\n    const queue = [];\n    for (let i = 0; i < players.length - 1; i++) {\n      for (let j = i + 1; j < players.length; j++) {\n        queue.push(`${players[i]} vs ${players[j]}`);\n      }\n    }\n    return queue;\n  };\n\n  // Function to move to the next match\n  const handleNextMatch = () => {\n    const nextQueue = matchQueue.slice(1); // Remove the current match from the queue\n    setMatchQueue(nextQueue);\n    setCurrentMatch(nextQueue[0] || 'No more matches scheduled.');\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <>\n          <MatchDisplay match={currentMatch} />\n          <NextMatch onNextMatch={handleNextMatch} />\n          <div className=\"match-queue\">\n            <h3>Upcoming Matches</h3>\n            {matchQueue.length > 1 ? (\n              <ul>\n                {matchQueue.slice(1).map((match, index) => (\n                  <li key={index}>{match}</li>\n                ))}\n              </ul>\n            ) : (\n              <p>No more matches scheduled.</p>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Tournament;\n */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}