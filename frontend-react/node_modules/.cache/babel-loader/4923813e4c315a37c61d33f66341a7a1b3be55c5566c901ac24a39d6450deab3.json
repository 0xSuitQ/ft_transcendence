{"ast":null,"code":"/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\nimport NextMatch from './NextMatch';\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // Store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // Store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n  const [matchQueue, setMatchQueue] = useState([]); // Store the upcoming matches\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      generateMatches();\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Generate the matches (simple round-robin style)\n  const generateMatches = () => {\n    let queue = [];\n    for (let i = 0; i < players.length; i++) {\n      for (let j = i + 1; j < players.length; j++) {\n        queue.push(`${players[i]} vs ${players[j]}`);\n      }\n    }\n    setMatchQueue(queue);\n    setCurrentMatch(queue.shift()); // Start with the first match\n  };\n\n  // Proceed to the next match\n  const nextMatch = () => {\n    if (matchQueue.length > 0) {\n      setCurrentMatch(matchQueue.shift());\n    } else {\n      setCurrentMatch(null);\n      alert('The tournament has ended!');\n    }\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <>\n          <MatchDisplay match={currentMatch} />\n          <NextMatch currentMatch={currentMatch} onNextMatch={nextMatch} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Tournament;\n */\n\n/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\nimport NextMatch from './NextMatch';\nimport MatchQueue from './MatchQueue';  // Importing MatchQueue component\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // Store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // Store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n  const [matchQueue, setMatchQueue] = useState([]); // Store the upcoming matches\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      generateMatches();\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Generate the matches (simple round-robin style)\n  const generateMatches = () => {\n    let queue = [];\n    for (let i = 0; i < players.length; i++) {\n      for (let j = i + 1; j < players.length; j++) {\n        queue.push(`${players[i]} vs ${players[j]}`);\n      }\n    }\n    setMatchQueue(queue);\n    setCurrentMatch(queue.shift()); // Start with the first match\n  };\n\n  // Proceed to the next match\n  const nextMatch = () => {\n    if (matchQueue.length > 0) {\n      setCurrentMatch(matchQueue.shift());\n    } else {\n      setCurrentMatch(null);\n      alert('The tournament has ended!');\n    }\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <>\n          <MatchDisplay match={currentMatch} />\n          <NextMatch currentMatch={currentMatch} onNextMatch={nextMatch} />\n          <MatchQueue matchQueue={matchQueue} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Tournament; */","map":{"version":3,"names":[],"sources":["/home/diaraz/Desktop/transcendence/frontend/src/components/Tournament.js"],"sourcesContent":["/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\nimport NextMatch from './NextMatch';\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // Store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // Store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n  const [matchQueue, setMatchQueue] = useState([]); // Store the upcoming matches\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      generateMatches();\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Generate the matches (simple round-robin style)\n  const generateMatches = () => {\n    let queue = [];\n    for (let i = 0; i < players.length; i++) {\n      for (let j = i + 1; j < players.length; j++) {\n        queue.push(`${players[i]} vs ${players[j]}`);\n      }\n    }\n    setMatchQueue(queue);\n    setCurrentMatch(queue.shift()); // Start with the first match\n  };\n\n  // Proceed to the next match\n  const nextMatch = () => {\n    if (matchQueue.length > 0) {\n      setCurrentMatch(matchQueue.shift());\n    } else {\n      setCurrentMatch(null);\n      alert('The tournament has ended!');\n    }\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <>\n          <MatchDisplay match={currentMatch} />\n          <NextMatch currentMatch={currentMatch} onNextMatch={nextMatch} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Tournament;\n */\n\n/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\nimport NextMatch from './NextMatch';\nimport MatchQueue from './MatchQueue';  // Importing MatchQueue component\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // Store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // Store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n  const [matchQueue, setMatchQueue] = useState([]); // Store the upcoming matches\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      generateMatches();\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Generate the matches (simple round-robin style)\n  const generateMatches = () => {\n    let queue = [];\n    for (let i = 0; i < players.length; i++) {\n      for (let j = i + 1; j < players.length; j++) {\n        queue.push(`${players[i]} vs ${players[j]}`);\n      }\n    }\n    setMatchQueue(queue);\n    setCurrentMatch(queue.shift()); // Start with the first match\n  };\n\n  // Proceed to the next match\n  const nextMatch = () => {\n    if (matchQueue.length > 0) {\n      setCurrentMatch(matchQueue.shift());\n    } else {\n      setCurrentMatch(null);\n      alert('The tournament has ended!');\n    }\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <>\n          <MatchDisplay match={currentMatch} />\n          <NextMatch currentMatch={currentMatch} onNextMatch={nextMatch} />\n          <MatchQueue matchQueue={matchQueue} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Tournament; */\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}