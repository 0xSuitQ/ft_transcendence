{"ast":null,"code":"/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // To store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // To store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament and generate matches\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      generateMatch(); // Placeholder for match generation logic\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Function to generate the next match (matchmaking logic to be added)\n  const generateMatch = () => {\n    // Placeholder for matchmaking logic, you can shuffle players and select two\n    if (players.length >= 2) {\n      const match = `${players[0]} vs ${players[1]}`;\n      setCurrentMatch(match);\n    }\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <MatchDisplay match={currentMatch} />\n      )}\n    </div>\n  );\n}\n\nexport default Tournament;\n */","map":{"version":3,"names":[],"sources":["/home/diaraz/Desktop/transcendence/frontend/src/components/Tournament.js"],"sourcesContent":["/* import React, { useState } from 'react';\nimport './Tournament.css';\nimport PlayerRegistration from './PlayerRegistration';\nimport MatchDisplay from './MatchDisplay';\n\nfunction Tournament() {\n  const [players, setPlayers] = useState([]); // To store player aliases\n  const [currentMatch, setCurrentMatch] = useState(null); // To store the current match\n  const [isTournamentStarted, setIsTournamentStarted] = useState(false);\n\n  // Function to add a new player\n  const addPlayer = (alias) => {\n    setPlayers([...players, alias]);\n  };\n\n  // Function to start the tournament and generate matches\n  const startTournament = () => {\n    if (players.length > 1) {\n      setIsTournamentStarted(true);\n      generateMatch(); // Placeholder for match generation logic\n    } else {\n      alert('At least two players are required to start the tournament.');\n    }\n  };\n\n  // Function to generate the next match (matchmaking logic to be added)\n  const generateMatch = () => {\n    // Placeholder for matchmaking logic, you can shuffle players and select two\n    if (players.length >= 2) {\n      const match = `${players[0]} vs ${players[1]}`;\n      setCurrentMatch(match);\n    }\n  };\n\n  return (\n    <div className=\"tournament-container\">\n      <h1>Tournament</h1>\n      {!isTournamentStarted ? (\n        <>\n          <PlayerRegistration addPlayer={addPlayer} players={players} />\n          <button className=\"start-button\" onClick={startTournament}>\n            Start Tournament\n          </button>\n        </>\n      ) : (\n        <MatchDisplay match={currentMatch} />\n      )}\n    </div>\n  );\n}\n\nexport default Tournament;\n */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}